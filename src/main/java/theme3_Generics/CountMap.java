package theme3_Generics;

import java.util.Map;

public interface CountMap<K> {
    // добавляет элемент в этот контейнер.
    void add(K o);

    //Добавить все элементы из source в текущий контейнер,
    // при совпадении ключей,     суммировать значения
    void addAll(CountMap<K> source);

    //Возвращает количество добавлений данного элемента
    int getCount(K o);

    //Удаляет элемент из контейнера и возвращает количество его добавлений(до удаления)
    int remove(K o);

    //количество разных элементов
    int size();

    //Вернуть java.util.Map. ключ - добавленный элемент,
    // значение - количество его добавлений

    /**
     * Возвращает отображение, в котором ключи - добавленные элементы, значения - количество добавлений, т.е. суммарное
     * число добавленных элементов. В качестве второго типа Map осознанно выбран Integer, т.к. единсвенной целью
     * интерфейса и класса служит подсчет элементов. Как вариант вместо Integer можно использовать Long что бы можно
     * было подсчитывать более широкий диапазон. В типах с плавающей точкой смысла не увидел - нет методов способных
     * выдать такие числа.
     *
     * @return {@code Map<T, Integer>}
     */
    Map<K, Integer> toMap();

    //Тот же самый контракт как и toMap(), только всю информацию записать в destination
    void toMap(Map<K, Integer> destination);
}
